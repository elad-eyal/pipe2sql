#!/usr/bin/python3

import logging
import os
import sys
import time

from configparser import ConfigParser, ExtendedInterpolation

import mysql.connector
from parse import parse


def parse_period(s):
    logging.debug(f"parse_period({s})")
    try: return parse("{hours:g}h", s).named["hours"]*60*60
    except: pass

    try: return parse("{minutes:g}m",s ).named["minutes"]*60
    except: pass

    try: return parse("{seconds:g}s",s ).named["seconds"]
    except: pass

    logging.error(f"Can't parse period expression {s}")
    return 4e9




cfg = ConfigParser(interpolation=ExtendedInterpolation(), defaults=dict(os.environ))
cfg.read("config")

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(levelname)-8s %(message)s',
                    datefmt="%Y-%m-%d %H:%M:%S",
                    handlers=[# TODO # logging.FileHandler(_logfilename),
                              logging.StreamHandler(sys.stdout)])
logging.getLogger("parse").setLevel(logging.WARNING)

database = cfg["database"]
patterns = [cfg[s] for s in cfg.sections() if s.startswith("pattern:")]
periodics = { s : [cfg[s], time.time()] for s in cfg.sections() if s.startswith("periodic:") }
unrecognizes = cfg["unrecognized"]

accepted_sections = ["database", "unrecognized"]+[p.name for p in patterns] + list(periodics.keys())
for s in cfg.sections():
    if s not in accepted_sections:
        logging.error(f"Section is not recognized: {s}")

conn = mysql.connector.connect(
	host=database.get("database_host"), 
	port=cfg.getint("database", "database_port"), 
	user=database.get("database_user"),
	password=database.get("database_password"),
	database=database.get("database_name"))
cursor = conn.cursor()


while True:
    stmts = []

    end = time.time() + 300 # TODO configuration option

    for s in sys.stdin:
        if not s: # TODO exiting when stdin is clos does not work
            break

        s = s.strip()
     
        for p in patterns:
            r = parse(p["parser"], s)
            if r:
                stmts.append((p["sql"], r.named,))
                break
        else: # no break
            if unrecognized:
                 stmts.append((unrecognized["sql"], { "text" : s }, ))

        if time.time() > end:
              break

    while not conn.is_connected():
        conn.ping(reconnect=True, attempts=20)

    now = time.time()
    for name,s in [(name,s) for name,(s,nxt) in periodics.items() if nxt<now]:
        periodics[name][1]= now + parse_period(s["period"])
        stmts.append((s["sql"],{},))

    logging.debug(f"Executing {len(stmts)} SQL statements")
    for i,(s,_) in enumerate(stmts):
        logging.debug(f"{i}. {s}")

    for sql, fields in stmts:
        cursor.execute(sql, fields)

    conn.commit()
